 * It's really simple
 * Make the filefilter.txt in the root folder which contains C/C++ file and write the rules to be used in following way. You can find the lastest available rules in http://nsiqcppstyle.appspot.com/rule_doc/ or just find the rules in the rules folder in N'SIQ CppStyle isntallation.
{{{
	~ RULE_10_1_A_do_not_use_bufferoverflow_risky_function_for_unix
	~ RULE_10_1_B_do_not_use_bufferoverflow_risky_function_for_windows
	~ RULE_3_1_A_do_not_start_filename_with_underbar
	~ RULE_3_2_B_do_not_use_same_filename_more_than_once
	~ RULE_3_2_CD_do_not_use_special_characters_in_filename
	~ RULE_3_2_F_use_representitive_classname_for_cpp_filename
	~ RULE_3_2_H_do_not_use_underbars_for_cpp_filename
	~ RULE_3_2_H_do_not_use_uppercase_for_c_filename
	~ RULE_3_3_A_start_function_name_with_is_or_has_when_return_bool
	~ RULE_3_3_A_start_function_name_with_lowercase_unix
	~ RULE_3_3_A_start_function_name_with_upperrcase_windows
	~ RULE_3_3_B_start_private_function_name_with_underbar
	~ RULE_4_1_A_A_use_tab_for_indentation
	~ RULE_4_1_A_B_use_space_for_indentation
	~ RULE_4_1_B_indent_each_enum_item_in_enum_block
	~ RULE_4_1_B_locate_each_enum_item_in_seperate_line
	~ RULE_4_1_C_align_long_function_parameter_list
	~ RULE_4_1_E_align_conditions
	~ RULE_4_2_A_A_space_around_operator
	~ RULE_4_2_A_B_space_around_word
	~ RULE_4_4_A_do_not_write_over_120_columns_per_line
	~ RULE_4_5_A_braces_for_function_definition_should_be_located_in_seperate_line
	~ RULE_4_5_A_braces_for_type_definition_should_be_located_in_seperate_line
	~ RULE_4_5_A_braces_inside_of_function_should_be_located_in_end_of_line
	~ RULE_4_5_A_indent_blocks_inside_of_function
	~ RULE_4_5_A_matching_braces_inside_of_function_should_be_located_same_column
	~ RULE_4_5_B_use_braces_even_for_one_statement
	~ RULE_5_2_C_provide_doxygen_class_comment_on_class_def
	~ RULE_5_2_C_provide_doxygen_namespace_comment_on_namespace_def
	~ RULE_5_2_C_provide_doxygen_struct_comment_on_struct_def
	~ RULE_5_3_A_provide_doxygen_function_comment_on_function_in_header
	~ RULE_5_3_A_provide_doxygen_function_comment_on_function_in_impl
	~ RULE_6_1_A_do_not_omit_function_parameter_names
	~ RULE_6_1_E_do_not_use_more_than_5_paramters_in_function
	~ RULE_6_1_G_write_less_than_200_lines_for_function
	~ RULE_6_2_A_do_not_use_system_dependent_type
	~ RULE_6_4_B_initialize_first_item_of_enum
	~ RULE_6_5_B_do_not_use_lowercase_for_macro_constants
	~ RULE_6_5_B_do_not_use_macro_for_constants
	~ RULE_7_1_B_A_do_not_use_double_assignment
	~ RULE_7_1_C_do_not_use_question_keyword
	~ RULE_7_2_B_do_not_use_goto_statement
	~ RULE_8_1_A_provide_file_info_comment
	~ RULE_9_1_A_do_not_use_hardcorded_include_path
	~ RULE_9_2_D_use_reentrant_function
	~ RULE_A_3_avoid_too_deep_blocks
}}}

   * If you want to rule all available rules first, just run "nsiqcppstyle -r > filefilter.txt".
   * filefilter.txt is configuration file for the friend tool [http://dev.naver.com/projects/nsiqcollector N'SIQ Collector] originally. This file is used the filter setting for selecting which file is analyzed by file name pattern matching. N'SIQ CppStyle uses N'SIQCollector filefilter.txt file for reuse the setting. In addition you can 


siq는 원래 자매 도구인 nsiqcollector에서 레가시 코드를 분석에서 제외할때 사용하는 설정 파일입니다. nsiqcppstyle도 nsiqcollector에 설정한 내용을 그대로 사용할 수 있습니다. 이에 대해서는 [http://dev.naver.com/projects/nsiqcollector nsiqcollector 설명 페이지] 를 참고하세요. 또한 아는 사람만 사용한다는 basefilelist 도 사용할 수 있습니다. (단 생성은 못합니다. 생성은 nsiqcollector를 사용하세요.)
 * 아래 룰 리스트는 상황에 따라 서로 충돌하는 경우도 있습니다. 예를 들어, RULE_4_1_A_A_use_tab_for_indent와 RULE_4_1_A_B_use_space_for_indent 은 서로 상반된 룰 입니다. 이런 경우를 잘 고려하셔서, 개별 프로젝트에 맞는 룰을 기재해 주세요. 아래 보시면 맨 뒤에 window 또는 unix 라고 써 있는 경우도 있습니다. 이것이 상반된 정책들이죠.
  * 그 다음 분석을 원하는 폴더에서 다음과 같이 실행해 주세요. 물론 해당 파일이 Path에 포함되어 있어야겠지요.
{{{
nsiqcppstyle 분석을원하는폴더
}}}

 * 그러면 줄줄이 분석 결과를 출력할 겁니다.

{{{
======================================================================================
Update: checking for update <== 최신 버젼이 있는 지 검사합니다. 최신 버젼이 있다면 다운로드 합니다.

============================ Analyzing box ===============================
======================================================================================

 * filefilter.txt 에 설정된 룰을 로드합니다. 

  -  RULE_10_1_A_do_not_use_bufferoverflow_risky_function_for_unix is applied. 
    ~~~
  -  RULE_9_1_A_do_not_use_hardcorded_include_path is applied.
======================================================================================

 * filefilter.txt 에 설정된 파일 필터를 출력합니다. 

Filter Scope "default" is applied.
Current Filter Setting (Following is applied sequentially)
  1. \externals\ is excluded
  2. \box\ is excluded
  3. \tet\ is excluded
  4. \.cvs\ is excluded
  5. \.svn\ is excluded

Current File extension and Language Settings
  C/C++=c,cxx,h,hpp,cpp,hxx

======================================================================================

 * 위반 항목 리스트.

d:\sample\a.c(1, 5):  Do not start function name(SetGlobalAuthority) with uppercase  [RULE_3_3_A_start_function_name_with_lowercase_unix] 
d:\sample\a.c(1, 5):  Doxygen Comment should be provided in front of function (SetGlobalAuthority) in impl file.  [RULE_5_3_A_provide_doxygen_function_comment_on_function_in_impl] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(1, 1):  Please provide file info comment in front of file  [RULE_8_1_A_provide_file_info_comment] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(21, 6):  Do not start function name(writeLog) with lowercase  [RULE_3_3_A_start_function_name_with_upperrcase_windows] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(21, 6):  Doxygen Comment should be provided in front of function (writeLog) in impl file.  [RULE_5_3_A_provide_doxygen_function_comment_on_function_in_impl] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(36, 6):  Do not start function name(openOut) with lowercase  [RULE_3_3_A_start_function_name_with_upperrcase_windows] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(36, 6):  Doxygen Comment should be provided in front of function (openOut) in impl file.  [RULE_5_3_A_provide_doxygen_function_comment_on_function_in_impl] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(40, 2):  Matching Braces inside of function should be located in the same column   [RULE_4_5_A_braces_inside_of_function_should_be_located_same_column] 
d:\sample\utils\trunk\boxmonlog\boxmonlog.cpp(44, 3):  Do not use system dependent type(int). Use system independent type like (int32_t)  

============================= Summary Report ==============================

 * 분석 결과를 리포팅 합니다.

 ** Total Available Rules     : 46   <== 현재 가용한 룰 개수
 ** Total Applied Rules       : 43   <== 그중 적용한 룰
 ** Total Violated Rules      : 20   <== 적용한 룰 중에 위반이 발생한 룰
 ** Total Errors Occurs       : 243  <== 총 위반 개수
 ** Total Analyzed Files      : 8    <== 총 분석한 파일 개수
 ** Total Violated Files Count: 8    <== 총 위반이 발생한 파일 개수
 ** Build Quality             : 0.00%  <== 총 파일중 위반이 발생하지 않은 파일 비율

=========================== Violated Rule Details ==========================

 * 룰별 위반 개수

 -  RULE_4_2_A_A_space_between_operators rule violated : 42
   ~~
 -  RULE_3_3_A_start_function_name_with_is_or_has_when_return_bool rule violated : 11

=========================== Violated File Details ==========================

 * 파일별 위반 룰 개수

 -  d:\sample\utils\_service\jobqueue.h  violated in total :  5
   *  RULE_4_2_A_A_space_between_operators  :  1
   ~~
   *  RULE_5_2_C_provide_doxygen_struct_comment_on_struct_def  :  1
 -  d:\sample\utils\_service\broker.cpp  violated in total :  44
   *  RULE_4_2_A_A_space_between_operators  :  10
    ~~
   *  RULE_5_2_C_provide_doxygen_class_comment_on_class_def  :  1

}}}
 * [각종옵션들]
== 파일별 분석 방법 ==
  * N'SIQ CppStyle은 파일 하나만 분석하는 것도 지원합니다. 다음과 같이 실행하시면 됩니다.
{{{
nsiqcppstyle -f 파일필터파일명 분석할파일명
}}}
  * 폴더단위 분석을 할때는 해당 폴더밑에 있는 filefilter.txt 를 읽어와서 룰 셋팅을 읽을 수 있는데, 파일을 분석하는 경우에는 폴더를 지정하는 것이 아니라서, 위와 같이 직접 파일필터를 지정해 줘야 합니다.